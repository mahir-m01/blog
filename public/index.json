
[{"content":"Hello there! Curious to know more about me?\nYou can here →\n","date":"27 October 2025","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/cryptography/","section":"Tags","summary":"","title":"Cryptography","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/cybersecurity/","section":"Tags","summary":"","title":"Cybersecurity","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/hashing/","section":"Tags","summary":"","title":"Hashing","type":"tags"},{"content":"Note:\nThe questions are shortened for a cleaner view Questions that are straightforward will only have answers attached. Such questions can be easily answered by reading the documentation given in the room. Task 1 - Introduction # No answer needed\nTask 2 - Hash Functions # 1) What is the SHA256 hash of the passport.jpg # Run the following command to view the hash:\nuser@ip-10-48-180-74:~/Hashing-Basics/Task-2$ sha256sum passport.jpg 77148c6f605a8df855f2b764bcc3be749d7db814f5f79134d2aa539a64b61f02 passport.jpg Ans: 77148c6f605a8df855f2b764bcc3be749d7db814f5f79134d2aa539a64b61f02\n2) What is the output size of the MD5 hash function? # Ans: 16\nThe MD5 hash function produces a fixed output size of 128 bits, which equals 16 bytes because each byte consists of 8 bits. Although MD5 hashes are typically displayed as a 32-character hexadecimal string, that format is just a readable representation - each hexadecimal character represents 4 bits, meaning two hex characters equal one byte. Therefore, the 32-character hex string corresponds to a 16-byte binary value.\n2) 8-bit hash output, how many possible hash values ? # We can find this by calculating 2^8\nAns: 256\nTask 3 - Insecure Password Storage for Authentication # 1) What is the 20th password in rockyou.txt? # Do NOT just cat it , be smart and only output the first 20 lines.\ncat rockyou.txt | head -n 20 Ans: qwerty\nTask 4 - Using Hash for Secure Password Storage # 1) Manually check the hash using the rainbow table above. # Ans: inS3CyourP4$$\n2) Crack the hash using an online tool. # I ended up using hashes.com for this\n5b31f93c09ad1d065c0491b764d04933:tryhackme:MD5\nAns: tryhackme\n3) Should you encrypt passwords in password-verification systems? # Ans: Nay\nThe reason is that even if we select a secure hashing algorithm to encrypt the passwords before storing them, we still need to store the used key. Consequently, if someone gets the key, they can easily decrypt all the passwords.\nTask 5 - Recognising Password Hashes # For the following questions, you can typically find the details on the internet by searching around and on websites like Hashcat\n1) What is the hash size in yescrypt? # Ans: 256\n2) What’s the Hash-Mode listed for Cisco-ASA MD5? # Ans: 2410\n1) What hashing algorithm is used in Cisco-IOS if it starts with $9$? # Ans: scrypt\nTask 6 - Password Cracking # 1) Use hashcat to crack the hash\u0026hellip; # A little bit of research by breaking down the hash by its parts ($2a$) tells us that that this is a bcrypt hash. Knowing this we can execute the following command:\n$2a$ corresponds to bcrypt and the mode is 3200\nhashcat -m 3200 -a 0 hash1.txt /usr/share/wordlists/rockyou.txt We can show the actual password by running the following command once cracked:\nhashcat -m 3200 -a 0 hash1.txt /usr/share/wordlists/rockyou.txt --show Ans: 85208520\n2) Use hashcat to crack the SHA2-256 hash # SHA2-256 - mode is 1400\nhashcat -m 1400 -a 0 hash2.txt /usr/share/wordlists/rockyou.txt We can show the actual password by running the following command once cracked:\nhashcat -m 1400 -a 0 hash2.txt /usr/share/wordlists/rockyou.txt --show Ans: halloween\n3) Use hashcat to crack the hash\u0026hellip; # $6$ corresponds to sha512crypt and the mode is 1800\nhashcat -m 1800 -a 0 hash3.txt /usr/share/wordlists/rockyou.txt We can show the actual password by running the following command once cracked:\nhashcat -m 1800 -a 0 hash3.txt /usr/share/wordlists/rockyou.txt --show Ans: spaceman\n4) Crack the hash\u0026hellip; # Since it is not really possible to determine the type of hash used, its best to use an online rainbow table. I decided to go with hashes.com as usual -\nb6b0d451bbf6fed658659a9e7e5598fe:funforyou\nAns: funforyou\nTask 7 - Hashing for Integrity Checking # 1) What is SHA256 hash of libgcrypt-1.11.0.tar.bz2 ? # Run the following command to get the hash:\nsha256sum libgcrypt-1.11.0.tar.bz2 Ans: 09120c9867ce7f2081d6aaa1775386b98c2f2f246135761aae47d81f58685b9c\n2) What’s the hashcat mode number ? # Searching for the mode number $pass for HMAC-SHA512 in hashcat we get:\nAns: 1750\nTask 8 - Conclusion # 1) Use base64 to decode RU5jb2RlREVjb2RlCg==. # Run the following command to decode the text\nbase64 -d decode-this.txt Ans: ENcodeDEcode\n","date":"27 October 2025","externalUrl":null,"permalink":"/writeups/hashing-basics/","section":"Writeups","summary":"","title":"Hashing Basics","type":"writeups"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 October 2025","externalUrl":null,"permalink":"/tags/tryhackme/","section":"Tags","summary":"","title":"TryHackMe","type":"tags"},{"content":" Writeups and walkthroughs for rooms, CTFs and other challenges from TryHackMe. ","date":"27 October 2025","externalUrl":null,"permalink":"/writeups/","section":"Writeups","summary":"","title":"Writeups","type":"writeups"},{"content":"Note:\nThe questions are shortened for a cleaner view Questions that are straightforward will only have answers attached. Such questions can be easily answered by reading the documentation given in the room. Task 1 - Introduction # No answer needed\nTask 2 - Common Use of Asymmetric Encryption # 1) what real object is analogous to the public key? # Ans: PCI DSS\nTask 3 - Plaintext to Ciphertext # 1) What do you call the encrypted plaintext? # Ans: ciphertext\n2) What do you call the process that returns the plaintext? # Ans: decryption\nTask 4 - Historical Ciphers # 1) XRPCTCRGNEI - Caesar Cipher, what is the plaintext? # To decrypt this we can bruteforce multiple key shifts to the left. The one that works is 15. That is key = 15.\nAns: ICANENCRYPT\nTask 5 - Types of Encryption # 1) Should you trust DES? (Yea/Nay)? # Ans: Nay\nDES was adopted as a standard in 1977 and uses a 56-bit key. With the advancement in computing power, in 1999, a DES key was successfully broken in less than 24 hours, motivating the shift to 3DES.\n2) When was AES adopted as an encryption standard? # Ans: 2001\nTask 6 - Basic Math # 1) What’s 1001 ⊕ 1010? # Follow the basic rules of XOR and apply it to numbers individually.\nAns: 0011\n2) What’s 118613842%9091? # Its best to use an online python compiler. It makes calculation easier.\nprint(118613842%9091) Ans: 3565\n3) What’s 60%12? # Its best to use an online python compiler. It makes calculation easier.\nprint(60%12) Ans: 0\n","date":"26 October 2025","externalUrl":null,"permalink":"/writeups/cryptography-basics/","section":"Writeups","summary":"","title":"Cryptography Basics","type":"writeups"},{"content":"","date":"26 October 2025","externalUrl":null,"permalink":"/tags/nmap/","section":"Tags","summary":"","title":"Nmap","type":"tags"},{"content":"Note:\nThe questions are shortened for a cleaner view Questions that are straightforward will only have answers attached. Such questions can be easily answered by reading the documentation given in the room. Task 1 - Introduction # No answer needed\nTask 2 - Host Discovery # 1) last IP address - scan target is 192.168.0.1/27? # Run the following command:\nnmap -sL 192.168.0.1/27 Ans: 192.168.0.31\nTask 3 - Port Scanning # 1) TCP ports open on the target 10.48.157.161? # Run the following command:\nnmap -sT 10.48.157.161 Nmap scan report for 10.48.157.161 Host is up (0.00058s latency). Not shown: 994 closed ports PORT STATE SERVICE 7/tcp open echo 9/tcp open discard 13/tcp open daytime 17/tcp open qotd 22/tcp open ssh 8008/tcp open http Ans: 6\n2) Web server on 10.48.157.161 - What is the flag ? # From the previous scan we know that a http server runs on port 8008. We can curl the web-server to retrieve the information.\ncurl 10.48.157.161:8008 h1\u0026gt;Flag\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;coffee-type\u0026#34;\u0026gt; \u0026lt;span style=\u0026#34;font-size: 24px;\u0026#34;\u0026gt;\u0026lt;code\u0026gt;THM{SECRET_PAGE_38B9P6}\u0026lt;/code\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; Ans: THM{SECRET_PAGE_38B9P6}\nTask 4 - Version Detection # 1) Name and detected version of the web server ? # By running the following command:\nnmap -A -p8008 10.48.157.161 PORT STATE SERVICE VERSION 8008/tcp open http lighttpd 1.4.74 Ans: lighttpd 1.4.74\nTask 5 - Timing # 1) Non-numeric equivalent of -T4? # Ans: -T aggressive\nTask 6 - Output # 1) Option to enable debugging? # Ans: -d\nTask 7 - Conclusion and Summary # 1) Scan - Nmap uses with local user privileges? # Ans: Connect Scan\n","date":"26 October 2025","externalUrl":null,"permalink":"/writeups/nmap-the-basics/","section":"Writeups","summary":"","title":"Nmap: The Basics","type":"writeups"},{"content":"Note:\nThe questions are shortened for a cleaner view Questions that are straightforward will only have answers attached. Such questions can be easily answered by reading the documentation given in the room. Task 1 - Introduction # No answer needed\nTask 2 - Importance of Cryptography # 1) Standard required for handling credit card information? # Ans: Lock\nTask 3 - RSA # 1) Knowing that p = 4391 and q = 6659. What is n? # n = p x q\nAns: 29239669\n2) Knowing that p = 4391 and q = 6659. What is ϕ(n)? # ϕ(n) = n - p - q + 1\nAns: 29228620\nTask 4 - Diffie-Hellman Key Exchange # 1) Consider p = 29, g = 5, a = 12. What is A? # A = g^a mod p\nAns: 7\n2) Consider p = 29, g = 5, b = 17. What is B? # B = g^b mod p\nAns: 9\n3) What is the key calculated by Bob? # key = B^a mod p\nAns: 24\n4) what is the key calculated by Alice? # key = A^b mod p\nAns: 24\nTask 5 - SSH # 1) What algorithm does the key use? # We can ls the directory and the type is in the name of they key.\nAns: RSA\nTask 6 - Digital Signatures and Certificates # 1) What does a remote web server use to prove itself to the client? # Ans: Certificate\n2) What would you use to get a free TLS certificate for your website? # Ans: Let's Encrypt\nTask 7 - PGP and GPG # 1) What secret word does the message hold? # We first import the key and the decrypt the message.\nuser@ip-10-48-173-106:~/Public-Crypto-Basics/Task-7$ ls message.gpg tryhackme.key user@ip-10-48-173-106:~/Public-Crypto-Basics/Task-7$ gpg --import tryhackme.key gpg: /home/user/.gnupg/trustdb.gpg: trustdb created gpg: key FFA4B5252BAEB2E6: public key \u0026#34;TryHackMe (Example Key)\u0026#34; imported gpg: key FFA4B5252BAEB2E6: secret key imported gpg: Total number processed: 1 gpg: imported: 1 gpg: secret keys read: 1 gpg: secret keys imported: 1 user@ip-10-48-173-106:~/Public-Crypto-Basics/Task-7$ gpg --decrypt message.gpg gpg: encrypted with rsa1024 key, ID 2A0A5FDC5081B1C5, created 2020-06-30 \u0026#34;TryHackMe (Example Key)\u0026#34; You decrypted the file! The secret word is Pineapple. Ans: Pineapple\n","date":"26 October 2025","externalUrl":null,"permalink":"/writeups/public-key-cryptography-basics/","section":"Writeups","summary":"","title":"Public Key Cryptography Basics","type":"writeups"},{"content":"","date":"24 October 2025","externalUrl":null,"permalink":"/tags/tcpdump/","section":"Tags","summary":"","title":"Tcpdump","type":"tags"},{"content":"Note:\nThe questions are shortened for a cleaner view Questions that are straightforward will only have answers attached. Such questions can be easily answered by reading the documentation given in the room. Task 1 - Introduction # 1) Library that is associated with tcpdump? # Ans: libpcap\nTask 2 - Basic Packet Capture # 1) Display addresses only in numeric format? # Ans: -n\nTask 3 - Filtering Expressions # 1) How many packets in traffic.pcap use ICMP ? # By running the following command in the terminal:\ntcpdump -r traffic.pcap icmp -n | wc 26 358 2722 We are interested in the first number\nAns: 26\n2) IP address of the host that asked for\u0026hellip; ? # We can find the ip by filtering for arp and the specific dest address\ntcpdump -r traffic.pcap arp and dst 192.168.124.137 reading from file traffic.pcap, link-type EN10MB (Ethernet) 07:18:29.940761 ARP, Request who-has ip-192-168-124-137.ap-south-1.compute.internal tell ip-192-168-124-148.ap-south-1.compute.internal, length 28 Ans: 192.168.124.148\n3) What hostname appears in the first DNS query? # Filtering for only dns packets:\ntcpdump -r traffic.pcap udp port 53 reading from file traffic.pcap, link-type EN10MB (Ethernet) 07:18:24.058626 IP ip-192-168-124-137.ap-south-1.compute.internal.33672 \u0026gt; ip-192-168-124-1.ap-south-1.compute.internal.domain: 39913+ A? mirrors.rockylinux.org. (40) Ans: mirrors.rockylinux.org\nTask 4 - Advanced Filtering # 1) Packets with only TCP Reset (RST) flag set? # By filtering for reset flag and piping it to wc\ntcpdump -r traffic.pcap \u0026#34;tcp[tcpflags] == tcp-rst\u0026#34; -n | wc 57 741 5975 Ans: 57\n2) IP that sent packets larger than 15000 bytes? # We can filter for greater than 1500 bytes with domain mapping disabled\ntcpdump -r traffic.pcap greater 15000 -n reading from file traffic.pcap, link-type EN10MB (Ethernet) 07:18:24.967023 IP 185.117.80.53.80 \u0026gt; 192.168.124.137.60518: Flags [.], seq 2140876081:2140896901, ack 74199.], 1605, win 235, options [nop,nop,TS val 2226566282 ecr 3054280184], length 20820: HTTP Ans: 185.117.80.53\nTask 5 - Displaying Packets # 1) MAC address of the host that sent an ARP request? # We can filter for arp and give the appropriate option to show MAC addresses\ntcpdump -r traffic.pcap arp -e reading from file traffic.pcap, link-type EN10MB (Ethernet).],07:18:29.940761 52:54:00:7c:d3:5b (oui Unknown) \u0026gt; Broadcast, ethertype ARP (0x0806), length 42: Request who-has ip-192-168-124-137.ap-south-1.compute.internal tell ip-192-168-124-148.ap-south-1.compute.internal, leng.], th 28 Ans: 52:54:00:7c:d3:5b\n","date":"24 October 2025","externalUrl":null,"permalink":"/writeups/tcpdump-the-basics/","section":"Writeups","summary":"","title":"Tcpdump: The Basics","type":"writeups"},{"content":"","date":"21 October 2025","externalUrl":null,"permalink":"/tags/wireshark/","section":"Tags","summary":"","title":"Wireshark","type":"tags"},{"content":"Note: The questions are shortened for a cleaner view\nTask 1 - Introduction # There\u0026rsquo;s no answer needed\nTask 2 - Statistics | Summary # 1) IP address of the hostname starts with \u0026ldquo;bbc\u0026rdquo;? # Statistics -\u0026gt; Resolved Addresses and search for bbc\nAns: 199.232.24.81\n2) Number of IPv4 conversations? # Statistics -\u0026gt; Conversations\nAns: 435\n3) Bytes (k) transferred from the \u0026ldquo;Micro-St\u0026rdquo; MAC address? # Statistics -\u0026gt; Endpoints; Name resolution -\u0026gt; Checked\nAns: 7474\n4) IP addresses linked with \u0026ldquo;Kansas City\u0026rdquo;? # Statistics -\u0026gt; Endpoints\nAns: 4\n5) IP address linked with \u0026ldquo;Blicnet\u0026rdquo; AS Organisation? # Statistics -\u0026gt; Endpoints; Sort AS Organisation column\nAns: 188.246.82.7\nTask 3 - Statistics | Protocol Details: # 1) Most used IPv4 destination address? # Statistics -\u0026gt; IPv4 Statistics -\u0026gt; All Addresses; Sort Count column\nAns: 10.100.1.33\nThe actual answer is supposed to be 10.10.57.178 according to statistical sorting in descending order. However THM seems to accept only the second highest.\n2) Max service request-response time of the DNS packets? # Statistics -\u0026gt; DNS; Sort Max val column; Observe Service Stats -\u0026gt; request-response time (secs)\nAns: 0.467897\n3) HTTP Requests accomplished by \u0026ldquo;rad[.]msn[.]com? # Statistics -\u0026gt; HTTP; Sort Topic / Item column\nAns: 39\nTask 4 - Packet Filtering | Principles # There\u0026rsquo;s no answer needed\nTask 5 - Packet Filtering | Principles # 1) Number of IP packets? # Set display filter: ip; Observe Displayed at the bottom\nAns: 81420\n2) Packets with a \u0026ldquo;TTL value less than 10\u0026rdquo;? # Set display filter: 1p.ttl \u0026lt; 10; Observe Displayed at the bottom\nAns: 66\n3) Packets which uses \u0026ldquo;TCP port 4444\u0026rdquo;? # Set display filter: tcp.port == 4444; Observe Displayed at the bottom\nAns: 632\n4) \u0026ldquo;HTTP GET\u0026rdquo; requests sent to port \u0026ldquo;80\u0026rdquo;? # Set display filter: http.request.method == \u0026quot;GET\u0026quot; \u0026amp;\u0026amp; tcp.port == 80; Observe Displayed at the bottom\nAns: 527\n5) Number of \u0026ldquo;type A DNS Queries\u0026rdquo;? # Set display filter: dns.qry.type == 1 \u0026amp;\u0026amp; dns.flags.response == 1; Observe Displayed at the bottom\nAns: 51\nYes, THM did not explicitly mention that it had to be DNS Responses, had to figure this one out by playing around with different filters\nTask 6 - Advanced Filtering # 1) Microsoft IIS Servers. Packets not from port 80 ? # Set display filter: http.server matches \u0026quot;microsoft\u0026quot; \u0026amp;\u0026amp; !(tcp.srcport == 80); Observe Displayed at the bottom\nAns: 21\n2) Microsoft IIS Servers. Packets that have \u0026ldquo;version 7.5\u0026rdquo; ? # Set display filter: http.server matches \u0026quot;microsoft\u0026quot; \u0026amp;\u0026amp; http.server matches \u0026quot;7.5\u0026quot; ; Observe Displayed at the bottom\nAns: 71\n3) Packets that use ports 3333, 4444 or 9999? # Set display filter: tcp.port in {3333 4444 9999}; Observe Displayed at the bottom\nAns: 2235\n4) Packets with \u0026ldquo;even TTL numbers\u0026rdquo;? # Set display filter: string(ip.ttl) matches \u0026quot;[02468]$\u0026quot;; Observe Displayed at the bottom\nAns: 2235\nWe use the string function because ip.ttl expects a type of integer\n5) Number of \u0026ldquo;Bad TCP Checksum\u0026rdquo; packets? # Set display filter: tcp.checksum.status == 0; Observe Displayed at the bottom\nAns: 34185\n6) Number of displayed packets? # *Use the gif/jpeg with http-200 button *\nAns: 261\n","date":"21 October 2025","externalUrl":null,"permalink":"/writeups/wireshark-packet-operations/","section":"Writeups","summary":"","title":"Wireshark: Packet Operations","type":"writeups"},{"content":"Note: The questions are shortened for a cleaner view\nTask 1 - Introduction # The answers are already provided by THM.\n1) File used to simulate the screenshots? # Ans: http1.pcapng\n2) File used to answer the questions? # Ans: Exercise.pcapng\nTask 2 - Tool Overview # Looking at Statistics -\u0026gt; Capture File Properties\n1) What is the flag? # Ans: TryHackMe_Wireshark_Demo\n2) Total number of packets? # Ans: 58620\n3) SHA256 hash value ? # Ans: f446de335565fb0b0ee5e5a3266703c778b2f3dfad7efeaeccb2da5641a6d6eb\nTask 3 - Packet Dissection # Looking at the Application Data:\n1) Markup Language used? # Ans: eXtensible Markup Language\n2) Arrival date of the packet? # (Answer format: Month/Day/Year)\nLooking at the Frame:\nAns: 05/13/2004\n3) TTL value? # Looking at IPv4:\nAns: 47\n4) TCP payload size? # Looking at Protocol:\nAns: 424\n5) e-tag value? # Looking at Hypertext Transfer Protocol:\nAns: 9a01a-4696-7e354b00\nThe HTTP ETag (entity tag) is an identifier for a specific version of a resource, used for caching efficiency and avoiding mid-air collisions.\nTask 4 - Packet Navigation # 1) Name of artist 1? # Ans: r4w8173\n2) Go to packet 12. What is the answer? # Getting the md5 sum of the image:\nAns: 911cd574a42865a956ccde2d04495ebf\n3) Alien\u0026rsquo;s name? # Exporting Packet Bytes of Line-based text data and viewing the file we get:\nAns: PACKETMASTER\n4) Number of warnings? # Looking at Analyze -\u0026gt; Expert Infromation\nAns: 1636\nTask 5 - Packet Filtering # 1) Filter query? # Ans: http\n2) Number of displayed packets? # Looking at the displayed packets with the filter http*\nAns: 1089\n3) Total number of artists? # \u0026lt;div id=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;div class=\u0026#39;story\u0026#39;\u0026gt; \u0026lt;a href=\u0026#39;artists.php?artist=1\u0026#39;\u0026gt;\u0026lt;h3\u0026gt;r4w8173\u0026lt;/h3\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#39;#\u0026#39; onClick=\u0026#34;window.open(\u0026#39;./comment.php?aid=1\u0026#39;,\u0026#39;comment\u0026#39;,\u0026#39;width=500,height=400\u0026#39;)\u0026#34;\u0026gt;comment on this artist\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;story\u0026#39;\u0026gt; \u0026lt;a href=\u0026#39;artists.php?artist=2\u0026#39;\u0026gt;\u0026lt;h3\u0026gt;Blad3\u0026lt;/h3\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#39;#\u0026#39; onClick=\u0026#34;window.open(\u0026#39;./comment.php?aid=2\u0026#39;,\u0026#39;comment\u0026#39;,\u0026#39;width=500,height=400\u0026#39;)\u0026#34;\u0026gt;comment on this artist\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#39;story\u0026#39;\u0026gt; \u0026lt;a href=\u0026#39;artists.php?artist=3\u0026#39;\u0026gt;\u0026lt;h3\u0026gt;lyzae\u0026lt;/h3\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#39;#\u0026#39; onClick=\u0026#34;window.open(\u0026#39;./comment.php?aid=3\u0026#39;,\u0026#39;comment\u0026#39;,\u0026#39;width=500,height=400\u0026#39;)\u0026#34;\u0026gt;comment on this artist\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;\t\u0026lt;/div\u0026gt; We get the above code block by searching for the term artist\nAns: 3\n4) Name of the second artist? # Ans: Blad3\n","date":"20 October 2025","externalUrl":null,"permalink":"/writeups/wireshark-the-basics/","section":"Writeups","summary":"","title":"Wireshark: The Basics","type":"writeups"},{"content":" Notes, hacks, and half - broken experiments around tech and security. Stuff I’m learning, exploring, breaking, or fixing. My corner of the web where I dump thoughts on code, security, and the weird tech rabbit holes I end up in.\n","date":"29 September 2025","externalUrl":null,"permalink":"/posts/","section":"Blogs","summary":"","title":"Blogs","type":"posts"},{"content":"","date":"29 September 2025","externalUrl":null,"permalink":"/tags/cryptograpahy/","section":"Tags","summary":"","title":"Cryptograpahy","type":"tags"},{"content":"","date":"29 September 2025","externalUrl":null,"permalink":"/tags/ecc/","section":"Tags","summary":"","title":"ECC","type":"tags"},{"content":"I was reviewing a CTF that my friend shared with me and I came across a question about \u0026lsquo;Elliptical Curve Cryptography\u0026rsquo;. I haven\u0026rsquo;t yet explored the deeper waters of cryptography and this one was pretty new to me. But hey, thats the essence of CTFs and I always appreciate a CTF that encourages you to explore and research instead of expecting you to know everything to be able to solve the question it offers. And during my research, I came across an amazing github repo article that explains Elliptical Curve Cryptography beautifully. My colleagues are sick and tired of hearing me say this but it is one of the best explanations to any topic I\u0026rsquo;ve encountered thus far.\nThe Challenge # The challenge provided 2 files and absolutely no context. So I had to go into this pretty much blind.\nECC.py # from secrets import a, b from collections import namedtuple from Crypto.Util.number import inverse, bytes_to_long FLAG = b\u0026#34;\u0026lt;REDACTED\u0026gt;\u0026#34; coordinate = namedtuple(\u0026#34;coordinate\u0026#34;, \u0026#34;x y\u0026#34;) o = \u0026#39;inf\u0026#39; def check(P): if P == o: return True else: return (P.y**2 - (P.x**3 + a*P.x + b)) % p == 0 and 0 \u0026lt;= P.x \u0026lt; p and 0 \u0026lt;= P.y \u0026lt; p def pinverse(P): if P == o: return P return coordinate(P.x, -P.y % p) def addition(P, Q): if P == o: return Q elif Q == o: return P elif Q == pinverse(P): return o else: if P == Q: l = (3*P.x**2 + a)*inverse(2*P.y, p) l%= p else: l= (Q.y - P.y) * inverse((Q.x - P.x), p) l%= p Sx = (l**2 - P.x - Q.x) % p Sy = (l*(P.x - Sx) - P.y) % p S = coordinate(Sx, Sy) assert check(S) return S def dbl(P, n): Q = P S = o while n \u0026gt; 0: if n % 2 == 1: S = addition(S, Q) Q = addition(Q, Q) n = n // 2 assert check(S) return S def public_key(): d = bytes_to_long(FLAG) return dbl(G, d) p=8027944432202837970016382166567613248055695684315346001687786051508079095211 # a and b are hidden :( gx =2105875689926932895143196884562047110500169848659102540268132432000998177662 gy = 229423364975599771276867046437732535419264207423006298355584008095715972502 G = coordinate(gx, gy) Q = public_key() print(Q) Output.txt # coordinate(x=3685899851710902647676109902198159056110437731756939136804788198715504103708, y=259383739652175557073121224113233231149464856533427701609450332409012223263) Analysis \u0026amp; Solution # 1) Compute the Curve Parameters # The first step is to compute the value of a and b before we can analyse further. The values a and b are the curve parameters that define the specific elliptic curve.\nfrom Crypto.Util.number import inverse p = 8027944432202837970016382166567613248055695684315346001687786051508079095211 Gx = 2105875689926932895143196884562047110500169848659102540268132432000998177662 Gy = 229423364975599771276867046437732535419264207423006298355584008095715972502 Qx = 3685899851710902647676109902198159056110437731756939136804788198715504103708 Qy = 259383739652175557073121224113233231149464856533427701609450332409012223263 # Compute curve parameters a and b # The elliptic curve equation is: y^2 = x^3 + a*x + b (mod p) # We have two points (G and Q) on the curve, so we can solve for a and b # Step 1: compute numerator and denominator to solve for \u0026#39;a\u0026#39; # Derived from: gy^2 - qy^2 = (gx^3 + a*gx + b) - (qx^3 + a*qx + b) mod p num = (pow(gy, 2, p) - pow(qy, 2, p) - (pow(gx, 3, p) - pow(qx, 3, p))) % p den = (gx - qx) % p # Step 2: compute \u0026#39;a\u0026#39; using modular inverse a = (num * inverse(den, p)) % p # Step 3: compute \u0026#39;b\u0026#39; using one of the points (G) b = (pow(gy, 2, p) - pow(gx, 3, p) - (a * gx)) % p print(\u0026#34;Computed curve parameters:\u0026#34;) print(\u0026#34;a =\u0026#34;, a) print(\u0026#34;b =\u0026#34;, b) 2) Verify Singularity # Now that we have all the required information (to an extent), primarily a and b , in my opinion its best practice to test whether the curve is singular or elliptical. Depending on the result our exploit paths will differ significantly.\nA non-singular curve is a curve whose certain value, called the \u0026ldquo;discriminant\u0026rdquo; of the curve, is nonzero. It holds when its parameters 𝑎 and 𝑏 satisfy the inequality:\n\\(4a^3 + 27b^2 \\not = 0\\)\nA curve that does not satisfy this inequality has a \u0026ldquo;problematic\u0026rdquo; point called a singular point. There are two types of such points: node and cusp\nWhat this means:\nThe curve has a cusp or a node (self-intersection) instead of being smooth.\nBecause of this, the set of points on the curve does not form a proper group under standard elliptic curve addition.\nThe curve does happen to be singular and is therefore vulnerable 3) Exploiting the Vulnerability # The following code from the github article exploits Elliptical Curves that are singular:\np = 8027944432202837970016382166567613248055695684315346001687786051508079095211 a = 57276030533159328146887045530181492991804891249085933575331289605 b = 4890108522805667613288743457538583820154692228816052112017335705944231712111 assert (4*a^3 + 27*b^2) % p == 0 Gx = 2105875689926932895143196884562047110500169848659102540268132432000998177662 Gy = 229423364975599771276867046437732535419264207423006298355584008095715972502 Qx = 3685899851710902647676109902198159056110437731756939136804788198715504103708 Qy = 259383739652175557073121224113233231149464856533427701609450332409012223263 x = GF(p)[\u0026#34;x\u0026#34;].gen() f = x^3 + a*x + b roots = f.roots() assert len(roots) == 2 # two roots, so one must be double if roots[0][1] == 2: double_root = roots[0][0] single_root = roots[1][0] else: double_root = roots[1][0] single_root = roots[0][0] print(\u0026#34;double root:\u0026#34;, double_root) print(\u0026#34;single root:\u0026#34;, single_root) # map G and Q to the new \u0026#34;shifted\u0026#34; curve Gx = (Gx - double_root) Qx = (Qx - double_root) # Transform G and Q into numbers g and q, such that q=g^n t = double_root - single_root t_sqrt = t.square_root() def transform(x, y, t_sqrt): return (y + t_sqrt * x) / (y - t_sqrt * x) g = transform(Gx, Gy, t_sqrt) q = transform(Qx, Qy, t_sqrt) print(\u0026#34;g:\u0026#34;, g) print(\u0026#34;q:\u0026#34;, q) # Find the private key n print(\u0026#34;Factors of p-1:\u0026#34;, factor(p-1)) print(\u0026#34;Calculating discrete log for g and q...\u0026#34;) found_key = discrete_log(q, g) print(\u0026#34;Found private key:\u0026#34;, found_key) from Crypto.Util.number import long_to_bytes print(\u0026#34;The secret is:\u0026#34;, long_to_bytes(found_key).decode()) When I first tried it worked almost \u0026rsquo;too-well\u0026rsquo;. I wonder if the creator took an inspiration from the same article to create the question. Nevertheless, it was fun to solve.\nConclusion # Obviously I did not get into the depths of Elliptical Curve Cryptography here, you can check out the github article for that. This was more of a documentation for one of the questions I encountered. Its about time I get well versed with ECC now\u0026hellip;\n","date":"29 September 2025","externalUrl":null,"permalink":"/posts/elliptical-curve-cryptography/","section":"Blogs","summary":"","title":"ECC CTFs are Interesting","type":"posts"},{"content":" Hi, I’m Mahir. I’m majoring in Computer Science \u0026amp; Artificial Intelligence with a minor in Psychology, but my story with tech started way before college.\nBack during COVID, when the world slowed down, I found myself diving into the rabbit hole of networking and cybersecurity and I never really climbed out. Since then, I’ve been building home labs, tinkering with servers, and playing around with remote networks. It’s just in my nature to break things apart, see what makes them tick, and learn by putting them back together (sometimes in better shape, sometimes… not so much). That curiosity is what sparked my obsession with tech and IT, and it keeps me hooked.\nI currently head the Cybersecurity Club at my university, where I get to share that curiosity with others, swap ideas, and geek out over challenges. I also hold ISC2’s Certified in Cybersecurity (CC) albeit a beginner cert, it is just the first step, but one that keeps me motivated to aim higher with certifications like CCNA and SSCP down the line.\nAt the heart of it, I’m someone who learns best by doing, breaking, and rebuilding. Tech isn’t just what I study, it’s something I live and breathe, and I’m excited to keep exploring where it takes me.\n","externalUrl":null,"permalink":"/about/","section":"","summary":"","title":"About","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]